/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.bn.analysis.distribution.analysis;

import java.util.*;
import sm.common.bn.analysis.distribution.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPResult().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAMainResult(AMainResult node)
    {
        defaultIn(node);
    }

    public void outAMainResult(AMainResult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainResult(AMainResult node)
    {
        inAMainResult(node);
        if(node.getTablePhrase() != null)
        {
            node.getTablePhrase().apply(this);
        }
        {
            List<PStructure> copy = new ArrayList<PStructure>(node.getStructure());
            for(PStructure e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        outAMainResult(node);
    }

    public void inATokTablePhrase(ATokTablePhrase node)
    {
        defaultIn(node);
    }

    public void outATokTablePhrase(ATokTablePhrase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATokTablePhrase(ATokTablePhrase node)
    {
        inATokTablePhrase(node);
        if(node.getTable() != null)
        {
            node.getTable().apply(this);
        }
        outATokTablePhrase(node);
    }

    public void inAPayloadStructure(APayloadStructure node)
    {
        defaultIn(node);
    }

    public void outAPayloadStructure(APayloadStructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPayloadStructure(APayloadStructure node)
    {
        inAPayloadStructure(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        if(node.getSslash() != null)
        {
            node.getSslash().apply(this);
        }
        if(node.getLegend() != null)
        {
            node.getLegend().apply(this);
        }
        outAPayloadStructure(node);
    }

    public void inADefFloat(ADefFloat node)
    {
        defaultIn(node);
    }

    public void outADefFloat(ADefFloat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefFloat(ADefFloat node)
    {
        inADefFloat(node);
        if(node.getMantisse() != null)
        {
            node.getMantisse().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getDecimal() != null)
        {
            node.getDecimal().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outADefFloat(node);
    }

    public void inASciFloat(ASciFloat node)
    {
        defaultIn(node);
    }

    public void outASciFloat(ASciFloat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASciFloat(ASciFloat node)
    {
        inASciFloat(node);
        if(node.getMantisse() != null)
        {
            node.getMantisse().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getExponent() != null)
        {
            node.getExponent().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASciFloat(node);
    }

    public void inADefMantisse(ADefMantisse node)
    {
        defaultIn(node);
    }

    public void outADefMantisse(ADefMantisse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefMantisse(ADefMantisse node)
    {
        inADefMantisse(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outADefMantisse(node);
    }

    public void inADefExponent(ADefExponent node)
    {
        defaultIn(node);
    }

    public void outADefExponent(ADefExponent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefExponent(ADefExponent node)
    {
        inADefExponent(node);
        if(node.getNumexp() != null)
        {
            node.getNumexp().apply(this);
        }
        outADefExponent(node);
    }

    public void inADefDecimal(ADefDecimal node)
    {
        defaultIn(node);
    }

    public void outADefDecimal(ADefDecimal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefDecimal(ADefDecimal node)
    {
        inADefDecimal(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outADefDecimal(node);
    }

    public void inAStructureLegend(AStructureLegend node)
    {
        defaultIn(node);
    }

    public void outAStructureLegend(AStructureLegend node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureLegend(AStructureLegend node)
    {
        inAStructureLegend(node);
        if(node.getP() != null)
        {
            node.getP().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getEvidence() != null)
        {
            node.getEvidence().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAStructureLegend(node);
    }

    public void inAIdVariable(AIdVariable node)
    {
        defaultIn(node);
    }

    public void outAIdVariable(AIdVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVariable(AIdVariable node)
    {
        inAIdVariable(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdVariable(node);
    }

    public void inAIdEvidence(AIdEvidence node)
    {
        defaultIn(node);
    }

    public void outAIdEvidence(AIdEvidence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdEvidence(AIdEvidence node)
    {
        inAIdEvidence(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdEvidence(node);
    }

    public void inAMainClose(AMainClose node)
    {
        defaultIn(node);
    }

    public void outAMainClose(AMainClose node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainClose(AMainClose node)
    {
        inAMainClose(node);
        if(node.getRBra() != null)
        {
            node.getRBra().apply(this);
        }
        outAMainClose(node);
    }
}
