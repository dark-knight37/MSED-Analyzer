/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.bn.analysis.distribution.parser;

import sm.common.bn.analysis.distribution.lexer.*;
import sm.common.bn.analysis.distribution.node.*;
import sm.common.bn.analysis.distribution.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAmainresult1Result */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAmainresult2Result */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce ATokTablePhrase */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce APayloadStructure */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AAdeffloat1Float */
		    {
			ArrayList list = new4();
			push(goTo(3), list, false);
		    }
		    break;
                    case 5: /* reduce AAdeffloat2Float */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AAscifloat1Float */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AAscifloat2Float */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce ADefMantisse */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce ADefExponent */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce ADefDecimal */
		    {
			ArrayList list = new10();
			push(goTo(6), list, false);
		    }
		    break;
                    case 11: /* reduce AAstructurelegend1Legend */
		    {
			ArrayList list = new11();
			push(goTo(7), list, false);
		    }
		    break;
                    case 12: /* reduce AAstructurelegend2Legend */
		    {
			ArrayList list = new12();
			push(goTo(7), list, false);
		    }
		    break;
                    case 13: /* reduce AIdVariable */
		    {
			ArrayList list = new13();
			push(goTo(8), list, false);
		    }
		    break;
                    case 14: /* reduce AIdEvidence */
		    {
			ArrayList list = new14();
			push(goTo(9), list, false);
		    }
		    break;
                    case 15: /* reduce AMainClose */
		    {
			ArrayList list = new15();
			push(goTo(10), list, false);
		    }
		    break;
                    case 16: /* reduce ATerminal$Structure */
		    {
			ArrayList list = new16();
			push(goTo(11), list, true);
		    }
		    break;
                    case 17: /* reduce ANonTerminal$Structure */
		    {
			ArrayList list = new17();
			push(goTo(11), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PResult node1 = (PResult) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAmainresult1Result */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PResult presultNode1;
        {
            // Block
        PTablePhrase ptablephraseNode2;
        LinkedList listNode3 = new LinkedList();
        PClose pcloseNode4;
        ptablephraseNode2 = (PTablePhrase)nodeArrayList1.get(0);
        {
            // Block
        }
        pcloseNode4 = (PClose)nodeArrayList2.get(0);

        presultNode1 = new AMainResult(ptablephraseNode2, listNode3, pcloseNode4);
        }
	nodeList.add(presultNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAmainresult2Result */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PResult presultNode1;
        {
            // Block
        PTablePhrase ptablephraseNode2;
        LinkedList listNode4 = new LinkedList();
        PClose pcloseNode5;
        ptablephraseNode2 = (PTablePhrase)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcloseNode5 = (PClose)nodeArrayList3.get(0);

        presultNode1 = new AMainResult(ptablephraseNode2, listNode4, pcloseNode5);
        }
	nodeList.add(presultNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ATokTablePhrase */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTablePhrase ptablephraseNode1;
        {
            // Block
        TTable ttableNode2;
        ttableNode2 = (TTable)nodeArrayList1.get(0);

        ptablephraseNode1 = new ATokTablePhrase(ttableNode2);
        }
	nodeList.add(ptablephraseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce APayloadStructure */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStructure pstructureNode1;
        {
            // Block
        PFloat pfloatNode2;
        TSslash tsslashNode3;
        PLegend plegendNode4;
        pfloatNode2 = (PFloat)nodeArrayList1.get(0);
        tsslashNode3 = (TSslash)nodeArrayList2.get(0);
        plegendNode4 = (PLegend)nodeArrayList3.get(0);

        pstructureNode1 = new APayloadStructure(pfloatNode2, tsslashNode3, plegendNode4);
        }
	nodeList.add(pstructureNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAdeffloat1Float */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFloat pfloatNode1;
        {
            // Block
        PMantisse pmantisseNode2;
        TDot tdotNode3;
        PDecimal pdecimalNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pmantisseNode2 = (PMantisse)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pdecimalNode4 = (PDecimal)nodeArrayList3.get(0);

        pfloatNode1 = new ADefFloat(pmantisseNode2, tdotNode3, pdecimalNode4, null);
        }
	nodeList.add(pfloatNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAdeffloat2Float */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFloat pfloatNode1;
        {
            // Block
        PMantisse pmantisseNode2;
        TDot tdotNode3;
        PDecimal pdecimalNode4;
        TSemi tsemiNode5;
        pmantisseNode2 = (PMantisse)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pdecimalNode4 = (PDecimal)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pfloatNode1 = new ADefFloat(pmantisseNode2, tdotNode3, pdecimalNode4, tsemiNode5);
        }
	nodeList.add(pfloatNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAscifloat1Float */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFloat pfloatNode1;
        {
            // Block
        PMantisse pmantisseNode2;
        TDot tdotNode3;
        PExponent pexponentNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pmantisseNode2 = (PMantisse)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pexponentNode4 = (PExponent)nodeArrayList3.get(0);

        pfloatNode1 = new ASciFloat(pmantisseNode2, tdotNode3, pexponentNode4, null);
        }
	nodeList.add(pfloatNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAscifloat2Float */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFloat pfloatNode1;
        {
            // Block
        PMantisse pmantisseNode2;
        TDot tdotNode3;
        PExponent pexponentNode4;
        TSemi tsemiNode5;
        pmantisseNode2 = (PMantisse)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pexponentNode4 = (PExponent)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pfloatNode1 = new ASciFloat(pmantisseNode2, tdotNode3, pexponentNode4, tsemiNode5);
        }
	nodeList.add(pfloatNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ADefMantisse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMantisse pmantisseNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pmantisseNode1 = new ADefMantisse(tnumberNode2);
        }
	nodeList.add(pmantisseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ADefExponent */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExponent pexponentNode1;
        {
            // Block
        TNumexp tnumexpNode2;
        tnumexpNode2 = (TNumexp)nodeArrayList1.get(0);

        pexponentNode1 = new ADefExponent(tnumexpNode2);
        }
	nodeList.add(pexponentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce ADefDecimal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDecimal pdecimalNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pdecimalNode1 = new ADefDecimal(tnumberNode2);
        }
	nodeList.add(pdecimalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAstructurelegend1Legend */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLegend plegendNode1;
        {
            // Block
        TP tpNode2;
        PVariable pvariableNode3;
        TPipe tpipeNode4;
        PEvidence pevidenceNode5;
        TRPar trparNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tpNode2 = (TP)nodeArrayList1.get(0);
        pvariableNode3 = (PVariable)nodeArrayList2.get(0);
        tpipeNode4 = (TPipe)nodeArrayList3.get(0);
        pevidenceNode5 = (PEvidence)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        plegendNode1 = new AStructureLegend(tpNode2, pvariableNode3, tpipeNode4, pevidenceNode5, trparNode6, null);
        }
	nodeList.add(plegendNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAstructurelegend2Legend */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLegend plegendNode1;
        {
            // Block
        TP tpNode2;
        PVariable pvariableNode3;
        TPipe tpipeNode4;
        PEvidence pevidenceNode5;
        TRPar trparNode6;
        TSemi tsemiNode7;
        tpNode2 = (TP)nodeArrayList1.get(0);
        pvariableNode3 = (PVariable)nodeArrayList2.get(0);
        tpipeNode4 = (TPipe)nodeArrayList3.get(0);
        pevidenceNode5 = (PEvidence)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tsemiNode7 = (TSemi)nodeArrayList6.get(0);

        plegendNode1 = new AStructureLegend(tpNode2, pvariableNode3, tpipeNode4, pevidenceNode5, trparNode6, tsemiNode7);
        }
	nodeList.add(plegendNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AIdVariable */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvariableNode1 = new AIdVariable(tidentifierNode2);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AIdEvidence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEvidence pevidenceNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pevidenceNode1 = new AIdEvidence(tidentifierNode2);
        }
	nodeList.add(pevidenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AMainClose */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClose pcloseNode1;
        {
            // Block
        TRBra trbraNode2;
        trbraNode2 = (TRBra)nodeArrayList1.get(0);

        pcloseNode1 = new AMainClose(trbraNode2);
        }
	nodeList.add(pcloseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ATerminal$Structure */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStructure pstructureNode1;
        pstructureNode1 = (PStructure)nodeArrayList1.get(0);
	if(pstructureNode1 != null)
	{
	  listNode2.add(pstructureNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ANonTerminal$Structure */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStructure pstructureNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstructureNode2 = (PStructure)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstructureNode2 != null)
	{
	  listNode3.add(pstructureNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 2}, {16, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {4, SHIFT, 4}, {10, SHIFT, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 7}, {2, SHIFT, 11}, },
			{{-1, ERROR, 8}, {0, SHIFT, 12}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 10}, {4, SHIFT, 4}, {10, SHIFT, 5}, },
			{{-1, ERROR, 11}, {11, SHIFT, 15}, },
			{{-1, ERROR, 12}, {4, SHIFT, 17}, {5, SHIFT, 18}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 15}, {3, SHIFT, 21}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 6}, {12, SHIFT, 23}, },
			{{-1, REDUCE, 4}, {12, SHIFT, 24}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 22}, {6, SHIFT, 25}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 25}, {3, SHIFT, 26}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 27}, {9, SHIFT, 28}, },
			{{-1, REDUCE, 11}, {12, SHIFT, 29}, },
			{{-1, REDUCE, 12}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 6}, {10, 13}, },
			{{-1, 7}, },
			{{-1, 8}, },
			{{-1, 19}, },
			{{-1, 20}, },
			{{-1, 16}, },
			{{-1, 22}, },
			{{-1, 27}, },
			{{-1, 9}, {10, 14}, },
			{{-1, 10}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'table'",
			"expecting: number, '}'",
			"expecting: EOF",
			"expecting: '.'",
			"expecting: '//'",
			"expecting: 'p('",
			"expecting: number, numexp",
			"expecting: identifier",
			"expecting: '//', ';'",
			"expecting: '|'",
			"expecting: ')'",
			"expecting: number, '}', ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 6, 1, 2, 7, 1, 8, 8, 8, 8, 9, 9, 4, 4, 7, 10, 10, 11, 1, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
