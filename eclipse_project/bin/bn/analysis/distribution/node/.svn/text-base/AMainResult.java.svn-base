/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.bn.analysis.distribution.node;

import java.util.*;
import sm.common.bn.analysis.distribution.analysis.*;

@SuppressWarnings("nls")
public final class AMainResult extends PResult
{
    private PTablePhrase _tablePhrase_;
    private final LinkedList<PStructure> _structure_ = new LinkedList<PStructure>();
    private PClose _close_;

    public AMainResult()
    {
        // Constructor
    }

    public AMainResult(
        @SuppressWarnings("hiding") PTablePhrase _tablePhrase_,
        @SuppressWarnings("hiding") List<PStructure> _structure_,
        @SuppressWarnings("hiding") PClose _close_)
    {
        // Constructor
        setTablePhrase(_tablePhrase_);

        setStructure(_structure_);

        setClose(_close_);

    }

    @Override
    public Object clone()
    {
        return new AMainResult(
            cloneNode(this._tablePhrase_),
            cloneList(this._structure_),
            cloneNode(this._close_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMainResult(this);
    }

    public PTablePhrase getTablePhrase()
    {
        return this._tablePhrase_;
    }

    public void setTablePhrase(PTablePhrase node)
    {
        if(this._tablePhrase_ != null)
        {
            this._tablePhrase_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tablePhrase_ = node;
    }

    public LinkedList<PStructure> getStructure()
    {
        return this._structure_;
    }

    public void setStructure(List<PStructure> list)
    {
        this._structure_.clear();
        this._structure_.addAll(list);
        for(PStructure e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PClose getClose()
    {
        return this._close_;
    }

    public void setClose(PClose node)
    {
        if(this._close_ != null)
        {
            this._close_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._close_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tablePhrase_)
            + toString(this._structure_)
            + toString(this._close_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tablePhrase_ == child)
        {
            this._tablePhrase_ = null;
            return;
        }

        if(this._structure_.remove(child))
        {
            return;
        }

        if(this._close_ == child)
        {
            this._close_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tablePhrase_ == oldChild)
        {
            setTablePhrase((PTablePhrase) newChild);
            return;
        }

        for(ListIterator<PStructure> i = this._structure_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStructure) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._close_ == oldChild)
        {
            setClose((PClose) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
